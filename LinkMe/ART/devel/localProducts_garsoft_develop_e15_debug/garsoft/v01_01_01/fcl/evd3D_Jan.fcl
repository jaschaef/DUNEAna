#include "Geometry_Jan.fcl"
#include "evdservices_base.fcl"
#include "DetectorProperties.fcl"
#include "GArProperties.fcl"
#include "ECALProperties.fcl"
#include "DetectorClocks.fcl"

process_name: EVD3D

standard_evd3D:
{
  module_type : EVD3D
  drawSimHits : true
  drawRawHits : false
  drawRecoHits : false
  drawMCTruth : true
}

services:
{
  # Load the service that manages root files for histograms.
  message:      @local::evd_message
  Geometry:                  @local::standard_geo             # from Geometry.fcl
  ExptGeoHelperInterface:    @local::standard_geometry_helper # from Geometry.fcl
  DetectorProperties:        @local::standard_detproperties   # from DetectorProperties.fcl
  GArProperties:             @local::standard_garproperties   # from GArProperties.fcl
  ECALProperties:            @local::standard_ecalproperties   # from ECALProperties.fcl
  DetectorClocks:            @local::standard_clocks          # from DetectorClocks.fcl
  EventDisplay3DService:       { }
}

# Define the services

#Look at the input files
source:
{
  module_type: RootInput
  fileNames:  [ "data.root" ]
  maxEvents:   -1       # Number of events to create
}

outputs:{}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers: {}

 filters:{}

 analyzers:
 {
  evdisp: @local::standard_evd3D
 }

 #list the modules for this path, order matters, filters reject all following items
 evd: [ evdisp ]

 #end_path are things that do not modify art::Event, includes analyzers
 #and output modules. all items here can be run simultaneously
 end_paths: [evd]
}
