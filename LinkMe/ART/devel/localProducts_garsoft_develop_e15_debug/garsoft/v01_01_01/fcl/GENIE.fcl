#NuTools Services
#include "magfield.fcl"
#include "seedservice.fcl"

#GArSoft Services
#include "DetectorClocks.fcl"
#include "DetectorProperties.fcl"
#include "GArProperties.fcl"
#include "Geometry.fcl"
#include "RunHistory.fcl"
#include "ECALProperties.fcl"

#Plugins
#include "GENIEGen.fcl"
#include "GArG4.fcl"

standard_geo:
{
 ForceUseFCLOnly:   false
 SortingParameters:
 {
 PixelActiveSize: 0.3      # cm
 PixelPitch:      0.333333 # cm
 }
 RelativePath:      ""
 GDML:              "ND_Concept_all.gdml"
 ROOT:              "ND_Concept_all.gdml"
 SurfaceY:          0.          # cm
 Name:              "Realistic"
 PositionEpsilon:   1.e-4
}

standard_auxdet_geo:
{
 RelativePath:      ""
 GDML:              "ND_Concept_all.gdml"
 ForceUseFCLOnly:   false
 SortingParameters: {}
}

standard_geant:
{
 module_type:            GArG4
 GeantCommandFile:       "GArG4.mac"
 AuxDetVolumeName:       ["volNDHPgTPC"]
 GArSimParsPSet:         @local::standard_g4simpars
 AuxDetActionPSet:       @local::standard_auxdetaction
 EDepActionPSet:         @local::standard_energydepositaction
 G4PhysListName:         "QGSP_BERT_HP"
 CheckOverlaps:          false
 DumpParticleList:       false
 SmartStacking:          0
 MaxStepSize:            2 # mm
 ProductionCut:          0.7 # mm
 KeepParticlesInVolumes: []
}

process_name: GenieGen

services:
{
 # Load the service that manages root files for histograms.
 TFileService:           { fileName: "prodgenie_hist.root" }
 TimeTracker:            {}
 RandomNumberGenerator:  {} #ART native random number generator
 Geometry:               @local::standard_geo
 ExptGeoHelperInterface: @local::standard_geometry_helper
 DetectorClocks:         @local::standard_clocks
 DetectorProperties:     @local::standard_detproperties
 GArProperties:          @local::standard_garproperties
 NuRandomService:        @local::standard_NuRandomService
 MagneticField:          @local::standard_mag_garsoft
#RunHistory:             @local::standard_runhistory
ECALProperties:          @local::standard_ecalproperties
 IFDH:                  {}
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_genie
   geant:     @local::standard_geant
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, geant, rns ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the ::art::event,
 #ie filters and producers
 trigger_paths: [simulate]

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "genie_gen.root" #default file name, can override from command line with -o or --output
 }
}
